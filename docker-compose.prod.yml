version: '3.8'

services:
  pytunnel-server:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: pytunnel-server-prod
    restart: unless-stopped
    ports:
      - "8765:8765"  # WebSocket port
      - "8081:8081"  # HTTP port
    environment:
      - NODE_ENV=production
      - USE_SSL=true
      - PUBLIC_HOST=${PUBLIC_HOST:-localhost}
      - AUTH_TOKEN=${AUTH_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAX_CONNECTIONS=${MAX_CONNECTIONS:-1000}
      - HEARTBEAT_INTERVAL=${HEARTBEAT_INTERVAL:-30}
      - CONNECTION_TIMEOUT=${CONNECTION_TIMEOUT:-300}
    env_file:
      - .env.production
    volumes:
      - ./certs:/app/certs:ro
      - ./logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - pytunnel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Production reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: pytunnel-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      pytunnel-server:
        condition: service_healthy
    networks:
      - pytunnel-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # Redis for session management and caching
  redis:
    image: redis:7-alpine
    container_name: pytunnel-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - pytunnel-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: pytunnel-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pytunnel-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: pytunnel-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - pytunnel-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  pytunnel-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
